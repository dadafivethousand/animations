@import url('https://fonts.googleapis.com/css2?family=Oswald:wght@700&display=swap');

/* Container for the entire wheel + pointer + button */
.vegas-container {
  position: relative;
  width: 500px;   /* adjust as needed */
  height: 500px;  /* same to keep it square */
  margin: 80px auto;
  font-family: 'Oswald', sans-serif;
}

/* The wheel itself, absolutely centered inside container */
.vegas-wheel {
  position: absolute;
  top: 50%;
  left: 50%;
  width: 100%;
  height: 100%;
  transform: translate(-50%, -50%) rotate(0deg);
  border-radius: 50%;
  animation: spinAnim 4s cubic-bezier(0.23, 1, 0.32, 1) 0s;
  box-shadow:
    0 0 20px rgba(0, 0, 0, 0.4),
    inset 0 0 10px rgba(255, 255, 255, 0.2);
  background: radial-gradient(#fff, #ddd); /* base metallic shading */
  overflow: hidden;
}

/* Each segment: position absolute, center-based. We'll rotate them with nth-child in a real advanced approach, but here's a simpler approach for demonstration */
.vegas-segment {
  position: absolute;
  width: 50%;        /* half the wheel's diameter */
  height: 50%;       /* half the wheel's diameter */
  top: 50%;
  left: 50%;
  transform-origin: 0% 0%;
}

/* We'll rely on .map in JS to rotate each segment. But for simplicity, let's do them in a uniform approach in the code. Alternatively, we might do nth-child. */

/* Because we're defining segments in JS, we can rely on inline transform in the code, or do a direct approach. 
   For a more 'dynamic' approach, you'd absolutely position each segment at the correct angle. 
   For demonstration, let's style them by index in CSS. 
*/
.vegas-segment:nth-child(1) {
  background: #fc3; /* bright color #1 */
  transform: translate(-50%, -50%) rotate(0deg) skewY(-45deg);
}
.vegas-segment:nth-child(2) {
  background: #f33; /* bright color #2 */
  transform: translate(-50%, -50%) rotate(45deg) skewY(-45deg);
}
.vegas-segment:nth-child(3) {
  background: #3c3; /* bright color #3 */
  transform: translate(-50%, -50%) rotate(90deg) skewY(-45deg);
}
.vegas-segment:nth-child(4) {
  background: #39f; /* bright color #4 */
  transform: translate(-50%, -50%) rotate(135deg) skewY(-45deg);
}
.vegas-segment:nth-child(5) {
  background: #f9c; /* bright color #5 */
  transform: translate(-50%, -50%) rotate(180deg) skewY(-45deg);
}
.vegas-segment:nth-child(6) {
  background: #ff6633; /* bright color #6 */
  transform: translate(-50%, -50%) rotate(225deg) skewY(-45deg);
}
.vegas-segment:nth-child(7) {
  background: #ccf; /* bright color #7 */
  transform: translate(-50%, -50%) rotate(270deg) skewY(-45deg);
}
.vegas-segment:nth-child(8) {
  background: #c9f; /* bright color #8 */
  transform: translate(-50%, -50%) rotate(315deg) skewY(-45deg);
}

/* Segment label */
.segment-label {
  position: absolute;
  top: 35%;
  left: 60%;
  width: 200%;
  transform: rotate(45deg) translateX(-50%);
  transform-origin: left center;
  font-size: 1.1rem;
  font-weight: bold;
  color: #222;
  text-shadow: 1px 1px #fff;
}

/* The pointer / indicator at the top */
.pointer {
  position: absolute;
  top: 0;
  left: 50%;
  width: 0; 
  height: 0; 
  border-left: 15px solid transparent;
  border-right: 15px solid transparent;
  border-bottom: 25px solid #222; /* pointer color */
  transform: translateX(-50%);
  z-index: 2;
}

/* The spin button below the wheel */
.spin-button {
  position: absolute;
  bottom: -60px;
  left: 50%;
  transform: translateX(-50%);
  background: #ffd700;
  border: 2px solid #444;
  border-radius: 8px;
  padding: 12px 24px;
  cursor: pointer;
  font-size: 1.2rem;
  font-weight: bold;
  color: #222;
  box-shadow: 0 4px 0 #ccc;
  transition: transform 0.1s, box-shadow 0.1s;
}

.spin-button:active {
  transform: translate(-50%, 2px);
  box-shadow: 0 2px 0 #ccc;
}

.spin-button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

/* We'll simply rely on inline style transform from React
   and not do separate keyframes for the spin. 
   If we needed a dynamic approach, we could do it with .spin class. 
*/
